architectury {
    common(rootProject.enabled_platforms.split(','))
}

loom {
    accessWidenerPath = file("src/main/resources/moonlight.accesswidener")

}

sourceSets.create("example"){
    var main = sourceSets.main
    compileClasspath += main.compileClasspath + main.output
    runtimeClasspath += main.runtimeClasspath + main.output
}


dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury:${rootProject.architectury_version}"

    modCompileOnly("curse.maven:yacl-667299:4523734")
    modCompileOnly("curse.maven:modernfix-790626:4599353")
    modCompileOnly ("curse.maven:map-atlases-forge-519759:5018175")
    modImplementation ("curse.maven:configured-457570:5096828")
    modCompileOnly("curse.maven:quark-243121:5344451")


    implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.3.6"))

        annotationProcessor 'net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5'

}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.mod_id
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

