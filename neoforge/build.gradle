plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.sinytra.adapter.userdev' version '1.2-SNAPSHOT'

}

architectury {
    platformSetupLoomIde()
    neoForge {
        //platformPackage = "forge"
    }
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}


processResources {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta', 'update.json']) {
        expand rootProject.ext.replaceProperties + [project: project]
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "neoforge"
    atAccessWideners.add("${rootProject.mod_id}.accesswidener") // this is a path inside the mod jar
    exclude('net/mehvahdjukaar/moonlight/example/**')
}

task updateJson {
    file('update.json').withWriter { w ->
        file('update_template.json').eachLine { line ->
            w << line.replaceAll("version", project.version) + System.getProperty("line.separator")
        }
        w.close()
    }
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }

    archiveClassifier = "neoforge-sources"
}

remapSourcesJar{
    archiveClassifier = "neoforge-sources"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }
    }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    neoForge "net.neoforged:neoforge:${neo_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    implementation 'org.jetbrains:annotations:22.0.0'

    modCompileOnly("curse.maven:autoreglib-250363:3857246")
    modCompileOnly("curse.maven:quark-oddities-301051:3575623")
    modCompileOnly("curse.maven:quark-243121:4463411")
    modCompileOnly("curse.maven:the-twilight-forest-227639:4755494")

    // Add Connector to the launch classpath
    additionalRuntimeClasspath "org.sinytra:Connector:2.0.0-beta.3+1.21.1"
    // Add FFAPI dependency
    modRuntimeOnly "org.sinytra.forgified-fabric-api:forgified-fabric-api:0.104.0+2.0.14+1.21.1"
    // Install desired Fabric mods. Make sure they remain unmapped at runtime
    modRuntimeOnly "maven.modrinth:flashback:0.11.0"

    //modImplementation("maven.modrinth:flashback:0.11.0")


    modImplementation ("curse.maven:piglin-proliferation-657831:5524520")

    //modRuntimeOnly("curse.maven:productivetrees-867074:5290721")
    // modRuntimeOnly("com.tterrag.registrate:Registrate:MC1.19-1.1.5")
    //// modImplementation("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")

    // modRuntimeOnly("net.mehvahdjukaar:supplementaries-forge:1.19.2-2.2.3")
    modCompileOnly ("curse.maven:map-atlases-forge-519759:4990003")
    //modImplementation ("curse.maven:supplementaries-412082:4995508")
    modCompileOnly ("curse.maven:configured-457570:5441232")
    modCompileOnly("curse.maven:yacl-667299:5424504")


}
